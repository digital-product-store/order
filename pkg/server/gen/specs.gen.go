// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// CardInfo defines model for CardInfo.
type CardInfo struct {
	Cvv     string `json:"cvv"`
	ExpDate string `json:"exp_date"`
	Number  string `json:"number"`
}

// CartItem defines model for CartItem.
type CartItem struct {
	Id    string  `json:"id"`
	Name  string  `json:"name"`
	Price float32 `json:"price"`
}

// Order defines model for Order.
type Order struct {
	Id        string     `json:"id"`
	Items     []CartItem `json:"items"`
	PaymentId *string    `json:"payment_id,omitempty"`
	Status    string     `json:"status"`
	Total     float32    `json:"total"`
}

// ClearCartParams defines parameters for ClearCart.
type ClearCartParams struct {
	// XUserId user uuid
	XUserId string `json:"x-user-id"`
}

// GetCartParams defines parameters for GetCart.
type GetCartParams struct {
	// XUserId user uuid
	XUserId string `json:"x-user-id"`
}

// UpdateCartJSONBody defines parameters for UpdateCart.
type UpdateCartJSONBody = []string

// UpdateCartParams defines parameters for UpdateCart.
type UpdateCartParams struct {
	// XUserId user uuid
	XUserId string `json:"x-user-id"`
}

// CheckoutCartParams defines parameters for CheckoutCart.
type CheckoutCartParams struct {
	// XUserId user uuid
	XUserId string `json:"x-user-id"`
}

// ListOrdersParams defines parameters for ListOrders.
type ListOrdersParams struct {
	// XUserId user uuid
	XUserId string `json:"x-user-id"`
}

// UpdateCartJSONRequestBody defines body for UpdateCart for application/json ContentType.
type UpdateCartJSONRequestBody = UpdateCartJSONBody

// CheckoutCartJSONRequestBody defines body for CheckoutCart for application/json ContentType.
type CheckoutCartJSONRequestBody = CardInfo

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /_health)
	Health(ctx echo.Context) error

	// (GET /_private/api/v1/orders/{uuid})
	GetOrderDetail(ctx echo.Context, uuid string) error

	// (DELETE /api/v1/cart)
	ClearCart(ctx echo.Context, params ClearCartParams) error

	// (GET /api/v1/cart)
	GetCart(ctx echo.Context, params GetCartParams) error

	// (POST /api/v1/cart)
	UpdateCart(ctx echo.Context, params UpdateCartParams) error

	// (POST /api/v1/cart/checkout)
	CheckoutCart(ctx echo.Context, params CheckoutCartParams) error

	// (GET /api/v1/orders)
	ListOrders(ctx echo.Context, params ListOrdersParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Health(ctx)
	return err
}

// GetOrderDetail converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderDetail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrderDetail(ctx, uuid)
	return err
}

// ClearCart converts echo context to params.
func (w *ServerInterfaceWrapper) ClearCart(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ClearCartParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-user-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-user-id")]; found {
		var XUserId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-user-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-user-id", runtime.ParamLocationHeader, valueList[0], &XUserId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-user-id: %s", err))
		}

		params.XUserId = XUserId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-user-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClearCart(ctx, params)
	return err
}

// GetCart converts echo context to params.
func (w *ServerInterfaceWrapper) GetCart(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCartParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-user-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-user-id")]; found {
		var XUserId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-user-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-user-id", runtime.ParamLocationHeader, valueList[0], &XUserId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-user-id: %s", err))
		}

		params.XUserId = XUserId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-user-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCart(ctx, params)
	return err
}

// UpdateCart converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCart(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateCartParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-user-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-user-id")]; found {
		var XUserId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-user-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-user-id", runtime.ParamLocationHeader, valueList[0], &XUserId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-user-id: %s", err))
		}

		params.XUserId = XUserId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-user-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCart(ctx, params)
	return err
}

// CheckoutCart converts echo context to params.
func (w *ServerInterfaceWrapper) CheckoutCart(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckoutCartParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-user-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-user-id")]; found {
		var XUserId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-user-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-user-id", runtime.ParamLocationHeader, valueList[0], &XUserId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-user-id: %s", err))
		}

		params.XUserId = XUserId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-user-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckoutCart(ctx, params)
	return err
}

// ListOrders converts echo context to params.
func (w *ServerInterfaceWrapper) ListOrders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOrdersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-user-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-user-id")]; found {
		var XUserId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-user-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-user-id", runtime.ParamLocationHeader, valueList[0], &XUserId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-user-id: %s", err))
		}

		params.XUserId = XUserId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-user-id is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListOrders(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/_health", wrapper.Health)
	router.GET(baseURL+"/_private/api/v1/orders/:uuid", wrapper.GetOrderDetail)
	router.DELETE(baseURL+"/api/v1/cart", wrapper.ClearCart)
	router.GET(baseURL+"/api/v1/cart", wrapper.GetCart)
	router.POST(baseURL+"/api/v1/cart", wrapper.UpdateCart)
	router.POST(baseURL+"/api/v1/cart/checkout", wrapper.CheckoutCart)
	router.GET(baseURL+"/api/v1/orders", wrapper.ListOrders)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yX328jNRDH/xXLIPGyl03p8bJPQJGgEhInIZ5QVE3tSePrru2zZ8NF1f7vaGxvmyZO",
	"c1CJH/cUa+2xv/OZH3YepHKDdxYtRdk9yKg2OEAaXkHQ13bteOyD8xjIYJpR2y3/0M6j7GSkYOydnBqJ",
	"H/2NBsLqpB2HWwyVqamRAT+MJqCW3e/zur3dmnTgqpkN3e17VMR7XkGga8LhWKLRdREw1NX5YFSaWbsw",
	"AMlOrnsHJB8PLbIO1Roty67zHjWdvwSdXf8kkYZwyPPz4MuAa9nJL9qnYLUlUu0jg+nxYAgBdskr2A1o",
	"6ebEQZGAxlidIkfQ78285H7ZZjaaHTgGwdamZJRylkARD3EA08tO3kIw8VuN20XvFPQsQ2NUwXgyzspO",
	"/oS9j2KMGAQ5oQICoQChIFAjHDMWYLXwsGMxhno+PLEXv2LYGoXiu3fXspFbDDFvuVxcLJZ8kvNowRvZ",
	"ycvFcnHJ4QTaJDjtzQahpw2P7zBJ5igCq7rWSVeaZjTROxtzdL9eLvnnuQux6DBR/OHCvbF3IudEnwL2",
	"zfLyRRvrqGLH8YK7yAEpSlf8rb3xwWyBsAVv2u1FmxDF9mEcjZ5OevMjUmL2AxLHhUEEGJAw8AmH4jL2",
	"e9yJlAuGvzG5uSw6yafJ/bShMGJTOk2tH6zqIDlj0CbB4H1vVJLcvo+s42Fvv5eqJVdiysSaHzr7vE+0",
	"MCxIC0lOuRyoHnO/e87wqkcIXJnn8KVkLoQSuw2CTu2v0Pv4hpe8eTXCt5W8GpXCGNdj3++EYsWon7me",
	"vFxNzck8+U95+NeS5JW99TiB2ImvYmpGdYjexQrF3zzfcf82yA8jRvre6d3fY3h8fZyBxZbC6Cgsoo7c",
	"zW9R+B4UamFshnjoxHQU8YszOT0mtpoFva0VQFLBLXXtRltN/YOSb9UG1b0bE5t6PK/Kiv9nRM8UQ34P",
	"VuKpIHDg1k6sXRDl2fEJEfwHGvuzjPBgzsU5X5Inb8efTczXY/ycG1+heb6QexOJHyOF2qlKqxdZMmL6",
	"T98ODed3W37XGIsxPgEsj52pObTi4hNotXeG/9c8GuTmfLQ8PxEr613BcGjwLr8Jaibzc2FaTX8GAAD/",
	"/4CpJCJcDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
